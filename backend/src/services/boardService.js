/* eslint-disable no-useless-catch */
import { StatusCodes } from 'http-status-codes'
import { cloneDeep } from 'lodash'
import { boardModel } from '~/models/boardModel'
import { cardModel } from '~/models/cardModel'
import { columnModel } from '~/models/columnModel'
import { invitationModel } from '~/models/invitationModel'
import { userModel } from '~/models/userModel'
import ApiError from '~/utils/ApiError'
import { slugify } from '~/utils/formatters'
import { columnService } from './columnService'


// Ph·∫ßn n√†y s·∫Ω ƒë·ª•ng nhi·ªÅu v√†o b·∫•t ƒë·ªìng b·ªô n√™n ta th√™m async
const createNew = async (reqBody) => {
  // eslint-disable-next-line no-useless-catch
  try {
    const newBoard = {
      ...reqBody,
      slug: slugify(reqBody.title)
    }

    // G·ªçi t·ªõi t·∫±ng Model ƒë·ªÉ x·ª≠ l√Ω l∆∞u b·∫£n ghi newBoard v√†o trong Database
    const createdBoard = await boardModel.createNew(newBoard)
    // console.log(createdBoard)

    // L·∫•y b·∫£n ghi board sau khi g·ªçi (t√πy m·ª•c ƒë√≠ch d·ª± √°n m√† c√≥ c·∫ßn b∆∞·ªõc n√†y ho·∫∑c kh√¥ng)
    const getNewBoard = await boardModel.findOneById(createdBoard.insertedId)
    if (getNewBoard) {
      // X·ª≠ l√Ω c·∫•u tr√∫c data ·ªü ƒë√¢y tr∆∞·ªõc khi tr·∫£ d·ªØ li·ªáu v·ªÅ
      getNewBoard.columns = []

      // C·∫≠p nh·∫≠t m·∫£ng columnOrderIds trong collection boards
      await userModel.pushBoardOrderIds(getNewBoard)
      await boardModel.pushOwnerIds(reqBody.userId, getNewBoard._id)
    }

    // Tr·∫£ k·∫øt qu·∫£ v·ªÅ, trong Service lu√¥n ph·∫£i c√≥ return, n·∫øu kh√¥ng n√≥ s·∫Ω request li√™n t·ª•c
    return getNewBoard
  } catch (error) {
    throw error
  }
}

const getDetails = async (boardId) => {
  // eslint-disable-next-line no-useless-catch
  try {
    // G·ªçi t·ªõi t·∫±ng Model ƒë·ªÉ x·ª≠ l√Ω l∆∞u b·∫£n ghi newBoard v√†o trong Database
    const board = await boardModel.getDetails(boardId)
    if (!board) {
      throw new ApiError(StatusCodes.NOT_FOUND, 'Board not found!')
    }

    // Thay ƒë·ªïi CTDL board
    // responseBoard: c√°i Board (v·ªõi CTDL kh√°c) m√† ta mu·ªën tr·∫£ v·ªÅ
    const resBoard = cloneDeep(board)
    // ƒê∆∞a card v·ªÅ ƒë√∫ng column c·ªßa n√≥
    resBoard.columns.forEach(column => {
      // C√°ch d√πng .equals c·ªßa mongoDB support cho vi·ªác so s√°nh ObjectId
      column.cards = resBoard.cards.filter(card => card.columnId.equals(column._id))

      // // C√°ch kh√°c ƒë∆°n gi·∫£n l√† d√πng toString ƒë·ªÉ chuy·ªÉn ObjectId v·ªÅ String v√† so s√°nh
      // column.cards = resBoard.cards.filter(card => card.columnId.toString() === column._id.toString())
    })

    // X√≥a th·∫±ng cards trong Board ban ƒë·∫ßu ƒë∆∞·ª£c t·∫°o t·ª´ boardModel
    delete resBoard.cards

    // Tr·∫£ k·∫øt qu·∫£ v·ªÅ, trong Service lu√¥n ph·∫£i c√≥ return, n·∫øu kh√¥ng n√≥ s·∫Ω request li√™n t·ª•c
    return resBoard
  } catch (error) { throw error }
}

const update = async (boardId, reqBody) => {
  // eslint-disable-next-line no-useless-catch
  try {
    const updateData = {
      ...reqBody,
      updatedAt: Date.now()
    }
    const updatedBoard = await boardModel.update(boardId, updateData)

    return updatedBoard
  } catch (error) { throw error }
}

const moveCardToDifferentColumn = async (reqBody) => {
  // eslint-disable-next-line no-useless-catch
  try {
    // * Khi di chuy·ªÉn card sang Column kh√°c:
    // * B1: C·∫≠p nh·∫≠t m·∫£ng cardOrderIds c·ªßa Column ban ƒë·∫ßu ch·ª©a n√≥ (Hi·ªÅu b·∫£n ch·∫•t l√† x√≥a c√°i _id c·ªßa Card ra kh·ªèi m·∫£ng)
    await columnModel.update(reqBody.prevColumnId, {
      cardOrderIds: reqBody.prevCardOrderIds,
      updatedAt: Date.now()
    })

    // * B2: C·∫≠p nh·∫≠t m·∫£ng cardOrderIds c·ªßa Column ti·∫øp theo (Hi·ªÅu b·∫£n ch·∫•t l√† th√™m _id c·ªßa Card v√†o m·∫£ng)
    await columnModel.update(reqBody.nextColumnId, {
      cardOrderIds: reqBody.nextCardOrderIds,
      updatedAt: Date.now()
    })


    // * B3: C·∫≠p nh·∫≠t l·∫°i tr∆∞·ªùng columnId m·ªõi c·ªßa c√°i Card ƒë√£ k√©o
    await cardModel.update(reqBody.currentCardId, {
      columnId: reqBody.nextColumnId
    })

    return { updateResult: 'Successfully' }
  } catch (error) { throw error }
}

const getListBoard = async () => {
  // eslint-disable-next-line no-useless-catch
  try {
    // G·ªçi t·ªõi model ƒë·ªÉ l·∫•y danh s√°ch c√°c board t·ª´ database
    const boardList = await boardModel.getListBoard()

    return boardList
  } catch (error) {
    throw error
  }
}

const deleteCardsByBoardId = async (boardId) => {
  try {
    // G·ªçi ph∆∞∆°ng th·ª©c x√≥a card t·ª´ cardModel
    await cardModel.deleteMany({ boardId: boardId })
  } catch (error) {
    throw error
  }
}

const deleteColumnsByBoardId = async (boardId) => {
  try {
    // G·ªçi ph∆∞∆°ng th·ª©c x√≥a column t·ª´ columnModel
    await columnModel.deleteMany({ boardId: boardId })
  } catch (error) {
    throw error
  }
}

const getListBoardByUserId = async (userId) => {
  try {
    const boardList = await boardModel.getListBoardByUserId(userId)
    if (!boardList) {
      throw new ApiError(StatusCodes.NOT_FOUND, 'No board found!')
    }
    // console.log('üêõ: ‚û°Ô∏è getListBoardByUserId ‚û°Ô∏è boardList:', boardList)
    return boardList
  } catch (error) {
    throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, `Error fetching boards by user ID: ${error.message}`)
  }
}

const deleteBoard = async (boardId) => {
  const targetBoard = await boardModel.findOneById(boardId)
  if (!targetBoard) {
    throw new ApiError(StatusCodes.NOT_FOUND, 'Board not found!')
  }

  // X√≥a c√°c l·ªùi m·ªùi c√≥ boardId t∆∞∆°ng ·ª©ng
  await invitationModel.deleteManyItem(targetBoard._id)

  const columnOrderIds = targetBoard.columnOrderIds
  for (const columnId of columnOrderIds) {
    await columnService.deleteItem(columnId)
  }

  const memberIds = targetBoard.memberIds

  // await columnModel.deleteManyByBoardId(boardId)
  await boardModel.deleteOneById(boardId)

  // X√≥a columnId trong m·∫£ng columnOrderIds c·ªßa c√°i Board ch·ª©a n√≥
  await userModel.pullBoardOrderIds(targetBoard._id, targetBoard.userId)

  for (const memberId of memberIds) {
    await userModel.pullBoardOrderIds(targetBoard._id, memberId)
  }

  return { deleteResult: `Column ${targetBoard.title} deleted successfully!` }
}

export const boardService = {
  createNew,
  getDetails,
  update,
  moveCardToDifferentColumn,
  getListBoard,
  deleteCardsByBoardId,
  deleteColumnsByBoardId,
  deleteBoard,
  getListBoardByUserId
}